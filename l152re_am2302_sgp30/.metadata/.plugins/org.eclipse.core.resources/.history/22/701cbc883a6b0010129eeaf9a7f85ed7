#include "i2c.h"

/*----------------v1.0-----------------*/
//int send_startbit(){
//
//	I2C1->CR1 |= I2C_CR1_START;
//	while (!(I2C1->SR1 & I2C_SR1_SB)){
////		if (--timeout == 0) {
////			I2C1->CR1 |= I2C_CR1_STOP;  //generate stop I2C p.682
////			check_pass(LOG_FAIL,"I2C_CR1_START");
////			return 1;
////		}
//	}
//	return 0;
//}
//
//int send_addr_read(uint8_t saddr){
//
//	I2C1->DR = (saddr << 1)|1;
//	while (!(I2C1->SR1 & I2C_SR1_ADDR)){
////		if (--timeout == 0) {
////			I2C1->CR1 |= I2C_CR1_STOP;  //generate stop I2C p.682
////			check_pass(LOG_FAIL, "I2C_SR1_ADDR");
////			return 1;
////		}
//	} 	/*Wait address event to be set*/
//	return 0;
//}
//int send_clear_addr_flag(){
////
//	volatile uint32_t tmp;
//	tmp = I2C1->SR2;
//	while (!(I2C1->SR1 & I2C_SR1_TXE)){
////		if (--timeout == 0) {
////		I2C1->CR1 |= I2C_CR1_STOP;  //generate stop I2C p.682
////		check_pass(LOG_FAIL,"I2C_SR1_TXE");
////		return 1;
////		}
//	} /*Wait transmit to be empty*/
//	return 0;
//}
//
//int send_ack(){
//	I2C1->CR1 |= I2C_CR1_ACK;
//	return 0;
//}
//
//int send_nack(){
//	I2C1->CR1 &= ~I2C_CR1_ACK;
//	return 0;
//}
//
//int read_data(uint8_t *data, uint8_t dbyte){
//	uint8_t i = dbyte;
//	while(i > 0)					//read data from chip
//	{
//		while (!(I2C1->SR1 & I2C_SR1_RXNE)) {
////			if (--timeout == 0) {
////				I2C1->CR1 |= I2C_CR1_STOP;  //generate stop I2C p.682
////				check_pass(LOG_FAIL,"I2C_SR1_RXNE");
////				return 1;
////			}
//		}
//
//		(*data++) = I2C1->DR; // Read data from DR
//		i--;
//	}
//	/* Disable ACK (send NACK) for the last byte*/
//	check_pass(send_nack(),"Enable ACK");
//
//	return 0;
//}
//
//int send_stopbit(){
//	I2C1->CR1 |= I2C_CR1_STOP;
//	return 0;
//}
//int wait_i2c_bus(){
//
//	while ((I2C1->SR2 & I2C_SR2_BUSY)){
////		if (--timeout == 0) {
////			I2C1->CR1 |= I2C_CR1_STOP;  //generate stop I2C p.682
////			check_pass(LOG_FAIL,"I2C_SR2_BUSY");
////			return 1;
////		}
//	}
//	return 0;
//}
//int clear_ack(){
//	I2C1->CR1 &= ~I2C_CR1_POS; //Acknowledge clear p.682
//	return 0;
//}
//int send_slave_addr_write(uint8_t saddr){
////
//	I2C1->DR = saddr << 1;
//	while (!(I2C1->SR1 & I2C_SR1_ADDR)){
////		if (--timeout == 0) {
////			I2C1->CR1 |= I2C_CR1_STOP;  //generate stop I2C p.682
////			check_pass(LOG_FAIL,"I2C_SR1_ADDR");
////			return 1;
////		}
//	} 	/*Wait address event to be set*/
//	return 0;
//}
//int send_command(uint8_t* command, uint8_t nbyte){
//
//	for(int i = 0; i < nbyte; i++){
//		/*Wait transmit empty */
//		while (!(I2C1->SR1 & I2C_SR1_TXE)){
////			if (--timeout == 0) {
////				I2C1->CR1 |= I2C_CR1_STOP;  //generate stop I2C p.682
////				check_pass(LOG_FAIL,"I2C_SR1_TXE");
////				return 1;
////			}
//		}
//		I2C1->DR = *command++;
//	}
//	return 0;
//}
//int wait_byte_transfer(){
//
//	while (!(I2C1->SR1 & I2C_SR1_BTF)){
////		if (--timeout == 0) {
////			I2C1->CR1 |= I2C_CR1_STOP;  //generate stop I2C p.682
////			check_pass(LOG_FAIL,"I2C_SR1_BTF");
////			return 1;
////		}
//	}
//	return 0;
//}


/* END -----------------------v1.0------------------------*/

/*----------v1.1----------*/
/*Register-Level I2C Functions*/
int I2C_Start() {
    I2C1->CR1 |= I2C_CR1_START;
    while(!(I2C1->SR1 & I2C_SR1_SB));	//SB: Start bit (Master mode) p690
    return DONE;
}

int I2C_Write_Addr(uint8_t addr) {
    I2C1->DR = addr;
    while(!(I2C1->SR1 & I2C_SR1_ADDR));	//ADDR: Address sent (master mode) p690
    //check_pass(I2C_Check_ACK_Failure(),"---I2C_Check_ACK_Failure");
    volatile uint32_t temp = I2C1->SR2;  // Clear ADDR p691
    return DONE;
}

int I2C_Write_Data(uint8_t data) {
    while(!(I2C1->SR1 & I2C_SR1_TXE)){}	//TxE: Data register empty (transmitters)  p689
    I2C1->DR = data;
    //check_pass(I2C_Check_ACK_Failure(),"---I2C_Check_ACK_Failure");
    return DONE;
}
int I2C_Read_Data(uint8_t* data){
	while(!(I2C1->SR1 & I2C_SR1_RXNE)){}	//RxNE: Data register not empty (receivers)  p689
	*data++ = I2C1->DR;
	return DONE;
}

int I2C_Clear_AddrFlag(){

}

int I2C_Stop() {
	while(!(I2C1->SR1 & I2C_SR1_BTF));	//BTF: Byte transfer finished p690
    I2C1->CR1 |= I2C_CR1_STOP;
    return DONE;
}

int I2C1_Bus_Test() {
    // Check for bus errors before I2C enable
    if(I2C1->SR1 & I2C_SR1_BERR) {
    	I2C1->SR1 &= ~I2C_SR1_BERR;  // Clear flag
    	return FAIL;
    }

    // Check BUSY flag - should be clear initially
    if(I2C1->SR2 & I2C_SR2_BUSY) {
        // Attempt bus recovery
        I2C1->CR1 |= I2C_CR1_SWRST;
        systickDelayMs(1);
        I2C1->CR1 &= ~I2C_CR1_SWRST;

        if(I2C1->SR2 & I2C_SR2_BUSY) return FAIL;
    }

    return PASS;
}

int I2C_POS_Read(){
	I2C1->CR1 |= I2C_CR1_POS;			//POS: Acknowledge/PEC Position (only for data reception) p.682
	return DONE;
}
int I2C_EN_ACK(){
	I2C1->CR1 |= I2C_CR1_ACK;
	return DONE;
}
int I2C_DI_ACK(){
	I2C1->CR1 &= ~I2C_CR1_ACK;	//No ACK
	return DONE;
}
int I2C_Check_ACK_Failure() {
    if(I2C1->SR1 & I2C_SR1_AF) {
        // No acknowledge received after address/data
        I2C1->SR1 &= ~I2C_SR1_AF;  // Clear flag
        return FAIL;
    }
    return PASS;
}
int I2C_Check_Overrun(void) {
    if(I2C1->SR1 & I2C_SR1_OVR) {
        // Data overrun/underrun condition
        I2C1->SR1 &= ~I2C_SR1_OVR;  // Clear flag
        return FAIL;
    }
    return PASS;
}

/* END ----------v1.1----------*/







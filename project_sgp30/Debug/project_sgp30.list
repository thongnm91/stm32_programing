
project_sgp30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ed0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800100c  0800100c  0001100c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001164  08001164  00011164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001168  08001168  00011168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800116c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000028  20000004  08001170  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000002c  08001170  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000774e  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001545  00000000  00000000  0002777b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002a0  00000000  00000000  00028cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00028f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000020d2  00000000  00000000  00029148  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000c6f  00000000  00000000  0002b21a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002be89  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000081c  00000000  00000000  0002bf08  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000024  00000000  00000000  0002c724  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002c748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	08000ff4 	.word	0x08000ff4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	08000ff4 	.word	0x08000ff4

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <check_pass>:

/* message>  PASS/FAIL
 * PASS 0
 * FAIL 1
 * */
void check_pass(int check, char* message){
 800018c:	b580      	push	{r7, lr}
 800018e:	b090      	sub	sp, #64	; 0x40
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	6039      	str	r1, [r7, #0]
	char buf[LOG_LENGH];

	strcpy(buf,message);	//Get message
 8000196:	f107 030c 	add.w	r3, r7, #12
 800019a:	6839      	ldr	r1, [r7, #0]
 800019c:	4618      	mov	r0, r3
 800019e:	f000 ff05 	bl	8000fac <strcpy>

	strncat(buf,">",1);		//Add >
 80001a2:	f107 030c 	add.w	r3, r7, #12
 80001a6:	4618      	mov	r0, r3
 80001a8:	f7ff ffe8 	bl	800017c <strlen>
 80001ac:	4603      	mov	r3, r0
 80001ae:	461a      	mov	r2, r3
 80001b0:	f107 030c 	add.w	r3, r7, #12
 80001b4:	4413      	add	r3, r2
 80001b6:	4964      	ldr	r1, [pc, #400]	; (8000348 <check_pass+0x1bc>)
 80001b8:	461a      	mov	r2, r3
 80001ba:	460b      	mov	r3, r1
 80001bc:	881b      	ldrh	r3, [r3, #0]
 80001be:	8013      	strh	r3, [r2, #0]

	uint8_t nspace = LOG_LENGH - 9 - strlen(message);	//Count number of space
 80001c0:	6838      	ldr	r0, [r7, #0]
 80001c2:	f7ff ffdb 	bl	800017c <strlen>
 80001c6:	4603      	mov	r3, r0
 80001c8:	b2db      	uxtb	r3, r3
 80001ca:	f1c3 0329 	rsb	r3, r3, #41	; 0x29
 80001ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    while(nspace>0){
 80001d2:	e013      	b.n	80001fc <check_pass+0x70>
    	strncat(buf, " ",1);
 80001d4:	f107 030c 	add.w	r3, r7, #12
 80001d8:	4618      	mov	r0, r3
 80001da:	f7ff ffcf 	bl	800017c <strlen>
 80001de:	4603      	mov	r3, r0
 80001e0:	461a      	mov	r2, r3
 80001e2:	f107 030c 	add.w	r3, r7, #12
 80001e6:	4413      	add	r3, r2
 80001e8:	4958      	ldr	r1, [pc, #352]	; (800034c <check_pass+0x1c0>)
 80001ea:	461a      	mov	r2, r3
 80001ec:	460b      	mov	r3, r1
 80001ee:	881b      	ldrh	r3, [r3, #0]
 80001f0:	8013      	strh	r3, [r2, #0]
    	nspace--;
 80001f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80001f6:	3b01      	subs	r3, #1
 80001f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    while(nspace>0){
 80001fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000200:	2b00      	cmp	r3, #0
 8000202:	d1e7      	bne.n	80001d4 <check_pass+0x48>
    }

    switch (check){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b0d      	cmp	r3, #13
 8000208:	f200 8095 	bhi.w	8000336 <check_pass+0x1aa>
 800020c:	a201      	add	r2, pc, #4	; (adr r2, 8000214 <check_pass+0x88>)
 800020e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000212:	bf00      	nop
 8000214:	0800024d 	.word	0x0800024d
 8000218:	0800027b 	.word	0x0800027b
 800021c:	080002a9 	.word	0x080002a9
 8000220:	080002d7 	.word	0x080002d7
 8000224:	08000337 	.word	0x08000337
 8000228:	08000337 	.word	0x08000337
 800022c:	08000337 	.word	0x08000337
 8000230:	08000337 	.word	0x08000337
 8000234:	08000337 	.word	0x08000337
 8000238:	08000337 	.word	0x08000337
 800023c:	08000305 	.word	0x08000305
 8000240:	0800030d 	.word	0x0800030d
 8000244:	08000327 	.word	0x08000327
 8000248:	0800032f 	.word	0x0800032f
    case 0:
    	strncat(buf, "DONE\n\r",6);
 800024c:	f107 030c 	add.w	r3, r7, #12
 8000250:	4618      	mov	r0, r3
 8000252:	f7ff ff93 	bl	800017c <strlen>
 8000256:	4603      	mov	r3, r0
 8000258:	461a      	mov	r2, r3
 800025a:	f107 030c 	add.w	r3, r7, #12
 800025e:	4413      	add	r3, r2
 8000260:	4a3b      	ldr	r2, [pc, #236]	; (8000350 <check_pass+0x1c4>)
 8000262:	6810      	ldr	r0, [r2, #0]
 8000264:	6018      	str	r0, [r3, #0]
 8000266:	8891      	ldrh	r1, [r2, #4]
 8000268:	7992      	ldrb	r2, [r2, #6]
 800026a:	8099      	strh	r1, [r3, #4]
 800026c:	719a      	strb	r2, [r3, #6]
		uart2_write_string(buf);
 800026e:	f107 030c 	add.w	r3, r7, #12
 8000272:	4618      	mov	r0, r3
 8000274:	f000 fe50 	bl	8000f18 <uart2_write_string>
    	break;
 8000278:	e062      	b.n	8000340 <check_pass+0x1b4>
    case 1:
    	strncat(buf, "FAIL\n\r",6);
 800027a:	f107 030c 	add.w	r3, r7, #12
 800027e:	4618      	mov	r0, r3
 8000280:	f7ff ff7c 	bl	800017c <strlen>
 8000284:	4603      	mov	r3, r0
 8000286:	461a      	mov	r2, r3
 8000288:	f107 030c 	add.w	r3, r7, #12
 800028c:	4413      	add	r3, r2
 800028e:	4a31      	ldr	r2, [pc, #196]	; (8000354 <check_pass+0x1c8>)
 8000290:	6810      	ldr	r0, [r2, #0]
 8000292:	6018      	str	r0, [r3, #0]
 8000294:	8891      	ldrh	r1, [r2, #4]
 8000296:	7992      	ldrb	r2, [r2, #6]
 8000298:	8099      	strh	r1, [r3, #4]
 800029a:	719a      	strb	r2, [r3, #6]
		uart2_write_string(buf);
 800029c:	f107 030c 	add.w	r3, r7, #12
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fe39 	bl	8000f18 <uart2_write_string>
    	break;
 80002a6:	e04b      	b.n	8000340 <check_pass+0x1b4>
    case 2:
    	strncat(buf, "PASS\n\r",7);
 80002a8:	f107 030c 	add.w	r3, r7, #12
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff65 	bl	800017c <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	461a      	mov	r2, r3
 80002b6:	f107 030c 	add.w	r3, r7, #12
 80002ba:	4413      	add	r3, r2
 80002bc:	4a26      	ldr	r2, [pc, #152]	; (8000358 <check_pass+0x1cc>)
 80002be:	6810      	ldr	r0, [r2, #0]
 80002c0:	6018      	str	r0, [r3, #0]
 80002c2:	8891      	ldrh	r1, [r2, #4]
 80002c4:	7992      	ldrb	r2, [r2, #6]
 80002c6:	8099      	strh	r1, [r3, #4]
 80002c8:	719a      	strb	r2, [r3, #6]
		uart2_write_string(buf);
 80002ca:	f107 030c 	add.w	r3, r7, #12
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 fe22 	bl	8000f18 <uart2_write_string>
		break;
 80002d4:	e034      	b.n	8000340 <check_pass+0x1b4>
    case 3:
		strncat(buf, "PASS\n\r",7);
 80002d6:	f107 030c 	add.w	r3, r7, #12
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ff4e 	bl	800017c <strlen>
 80002e0:	4603      	mov	r3, r0
 80002e2:	461a      	mov	r2, r3
 80002e4:	f107 030c 	add.w	r3, r7, #12
 80002e8:	4413      	add	r3, r2
 80002ea:	4a1b      	ldr	r2, [pc, #108]	; (8000358 <check_pass+0x1cc>)
 80002ec:	6810      	ldr	r0, [r2, #0]
 80002ee:	6018      	str	r0, [r3, #0]
 80002f0:	8891      	ldrh	r1, [r2, #4]
 80002f2:	7992      	ldrb	r2, [r2, #6]
 80002f4:	8099      	strh	r1, [r3, #4]
 80002f6:	719a      	strb	r2, [r3, #6]
		uart2_write_string(buf);
 80002f8:	f107 030c 	add.w	r3, r7, #12
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fe0b 	bl	8000f18 <uart2_write_string>
		break;
 8000302:	e01d      	b.n	8000340 <check_pass+0x1b4>
    case I2C_SUCCESS:
        printf("I2C_SUCCESS\n");
 8000304:	4815      	ldr	r0, [pc, #84]	; (800035c <check_pass+0x1d0>)
 8000306:	f000 fd61 	bl	8000dcc <puts>
        break;
 800030a:	e019      	b.n	8000340 <check_pass+0x1b4>
    case I2C_ERROR_TIMEOUT_25MS:
		strncat(buf, "Error: clock stretching 25ms timeout\n\r",7);
 800030c:	f107 030c 	add.w	r3, r7, #12
 8000310:	2207      	movs	r2, #7
 8000312:	4913      	ldr	r1, [pc, #76]	; (8000360 <check_pass+0x1d4>)
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fe51 	bl	8000fbc <strncat>
		uart2_write_string(buf);
 800031a:	f107 030c 	add.w	r3, r7, #12
 800031e:	4618      	mov	r0, r3
 8000320:	f000 fdfa 	bl	8000f18 <uart2_write_string>
		break;
 8000324:	e00c      	b.n	8000340 <check_pass+0x1b4>
    case I2C_ERROR_SMBALERT:
         printf("Error: SMBus alert detected\n");
 8000326:	480f      	ldr	r0, [pc, #60]	; (8000364 <check_pass+0x1d8>)
 8000328:	f000 fd50 	bl	8000dcc <puts>
         break;
 800032c:	e008      	b.n	8000340 <check_pass+0x1b4>
     case I2C_ERROR_NACK:
         printf("Error: SGP30 not responding (NACK)\n");
 800032e:	480e      	ldr	r0, [pc, #56]	; (8000368 <check_pass+0x1dc>)
 8000330:	f000 fd4c 	bl	8000dcc <puts>
         break;
 8000334:	e004      	b.n	8000340 <check_pass+0x1b4>
    default:
    	uart2_write_string(buf);
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fdec 	bl	8000f18 <uart2_write_string>
    }

}
 8000340:	bf00      	nop
 8000342:	3740      	adds	r7, #64	; 0x40
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	0800100c 	.word	0x0800100c
 800034c:	08001010 	.word	0x08001010
 8000350:	08001014 	.word	0x08001014
 8000354:	0800101c 	.word	0x0800101c
 8000358:	08001024 	.word	0x08001024
 800035c:	0800102c 	.word	0x0800102c
 8000360:	08001038 	.word	0x08001038
 8000364:	08001060 	.word	0x08001060
 8000368:	0800107c 	.word	0x0800107c

0800036c <I2C_Start>:

/* END -----------------------v1.0------------------------*/

/*----------v1.1----------*/
/*Register-Level I2C Functions*/
int I2C_Start() {
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 8000370:	4a08      	ldr	r2, [pc, #32]	; (8000394 <I2C_Start+0x28>)
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <I2C_Start+0x28>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037a:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));	//SB: Start bit (Master mode) p690
 800037c:	bf00      	nop
 800037e:	4b05      	ldr	r3, [pc, #20]	; (8000394 <I2C_Start+0x28>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0f9      	beq.n	800037e <I2C_Start+0x12>
    return DONE;
 800038a:	2300      	movs	r3, #0
}
 800038c:	4618      	mov	r0, r3
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40005400 	.word	0x40005400

08000398 <I2C_Write_Addr>:

int I2C_Write_Addr(uint8_t addr) {
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
    I2C1->DR = addr;
 80003a2:	4a09      	ldr	r2, [pc, #36]	; (80003c8 <I2C_Write_Addr+0x30>)
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_ADDR));	//ADDR: Address sent (master mode) p690
 80003a8:	bf00      	nop
 80003aa:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <I2C_Write_Addr+0x30>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f003 0302 	and.w	r3, r3, #2
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0f9      	beq.n	80003aa <I2C_Write_Addr+0x12>
    //check_pass(I2C_Check_ACK_Failure(),"---I2C_Check_ACK_Failure");
    volatile uint32_t temp = I2C1->SR2;  // Clear ADDR p691
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <I2C_Write_Addr+0x30>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	60fb      	str	r3, [r7, #12]
    return DONE;
 80003bc:	2300      	movs	r3, #0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40005400 	.word	0x40005400

080003cc <I2C_Write_Data>:

int I2C_Write_Data(uint8_t data) {
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
    while(!(I2C1->SR1 & I2C_SR1_TXE)){}	//TxE: Data register empty (transmitters)  p689
 80003d6:	bf00      	nop
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <I2C_Write_Data+0x2c>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0f9      	beq.n	80003d8 <I2C_Write_Data+0xc>
    I2C1->DR = data;
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <I2C_Write_Data+0x2c>)
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	6113      	str	r3, [r2, #16]
    //check_pass(I2C_Check_ACK_Failure(),"---I2C_Check_ACK_Failure");
    return DONE;
 80003ea:	2300      	movs	r3, #0
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40005400 	.word	0x40005400

080003fc <I2C_Clear_AddrFlag>:
	while(!(I2C1->SR1 & I2C_SR1_RXNE)){}	//RxNE: Data register not empty (receivers)  p689
	*data++ = I2C1->DR;
	return DONE;
}
//int I2C_Read_Data(uint8_t *data, uint8_t len){
//	for(int i = 0; i < len; i++) {
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
//		//check_pass(I2C_Check_Overrun(),"---I2C_Check_Overrun");
//		//check_pass(I2C_POS_Read(),"I2C_POS_Read");
 8000400:	bf00      	nop
 8000402:	4618      	mov	r0, r3
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr
	...

0800040c <I2C_Stop>:
//
//		while(!(I2C1->SR1 & I2C_SR1_RXNE)){
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
////			// Critical: Monitor for 25ms slave cumulative clock extend timeout
 8000410:	bf00      	nop
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <I2C_Stop+0x28>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f003 0304 	and.w	r3, r3, #4
 800041a:	2b00      	cmp	r3, #0
 800041c:	d0f9      	beq.n	8000412 <I2C_Stop+0x6>
////			if (I2C1->SR1 & I2C_SR1_TIMEOUT) {
 800041e:	4a05      	ldr	r2, [pc, #20]	; (8000434 <I2C_Stop+0x28>)
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <I2C_Stop+0x28>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000428:	6013      	str	r3, [r2, #0]
////				I2C1->SR1 &= ~I2C_SR1_TIMEOUT;
 800042a:	2300      	movs	r3, #0
////				I2C1->CR1 |= I2C_CR1_STOP;  // Generate STOP
 800042c:	4618      	mov	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40005400 	.word	0x40005400

08000438 <I2C1_Bus_Test>:
////				check_pass(I2C_ERROR_TIMEOUT_25MS,"") ;
////				break;
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
////			}
////
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <I2C1_Bus_Test+0x60>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000444:	2b00      	cmp	r3, #0
 8000446:	d007      	beq.n	8000458 <I2C1_Bus_Test+0x20>
////			if (I2C1->SR1 & I2C_SR1_SMBALERT) {
 8000448:	4a13      	ldr	r2, [pc, #76]	; (8000498 <I2C1_Bus_Test+0x60>)
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <I2C1_Bus_Test+0x60>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000452:	6153      	str	r3, [r2, #20]
////				I2C1->SR1 &= ~I2C_SR1_SMBALERT;
 8000454:	2301      	movs	r3, #1
 8000456:	e01d      	b.n	8000494 <I2C1_Bus_Test+0x5c>
////				I2C1->CR1 |= I2C_CR1_STOP;
////
////				check_pass(I2C_ERROR_SMBALERT,"") ;
////				break;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <I2C1_Bus_Test+0x60>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0302 	and.w	r3, r3, #2
 8000460:	2b00      	cmp	r3, #0
 8000462:	d016      	beq.n	8000492 <I2C1_Bus_Test+0x5a>
////			}
////
 8000464:	4a0c      	ldr	r2, [pc, #48]	; (8000498 <I2C1_Bus_Test+0x60>)
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <I2C1_Bus_Test+0x60>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800046e:	6013      	str	r3, [r2, #0]
////			// Check other error conditions
 8000470:	2001      	movs	r0, #1
 8000472:	f000 fb8b 	bl	8000b8c <systickDelayMs>
////			if (I2C1->SR1 & (I2C_SR1_BERR | I2C_SR1_ARLO)) {
 8000476:	4a08      	ldr	r2, [pc, #32]	; (8000498 <I2C1_Bus_Test+0x60>)
 8000478:	4b07      	ldr	r3, [pc, #28]	; (8000498 <I2C1_Bus_Test+0x60>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000480:	6013      	str	r3, [r2, #0]
////				I2C1->CR1 |= I2C_CR1_STOP;
////
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <I2C1_Bus_Test+0x60>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f003 0302 	and.w	r3, r3, #2
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <I2C1_Bus_Test+0x5a>
 800048e:	2301      	movs	r3, #1
 8000490:	e000      	b.n	8000494 <I2C1_Bus_Test+0x5c>
////				check_pass(I2C_ERROR_BUS_ERROR,"") ;
////				break;
////			}
 8000492:	2302      	movs	r3, #2
//		}
 8000494:	4618      	mov	r0, r3
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40005400 	.word	0x40005400

0800049c <I2C_EN_ACK>:
//
//		data[i] = I2C1->DR;
//
//		if(i == len-1)	 {
//			check_pass(I2C_DI_ACK(),"---I2C_DI_ACK");
//			check_pass(I2C_Stop(),"---I2C_Stop");
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
//		} else check_pass(I2C_EN_ACK(),"---I2C_EN_ACK");
 80004a0:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <I2C_EN_ACK+0x1c>)
 80004a2:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <I2C_EN_ACK+0x1c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004aa:	6013      	str	r3, [r2, #0]
//		while((I2C1->SR1 & I2C_SR1_RXNE)){}
 80004ac:	2300      	movs	r3, #0
//
 80004ae:	4618      	mov	r0, r3
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40005400 	.word	0x40005400

080004bc <I2C_DI_ACK>:
//	}
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
//	return DONE;
 80004c0:	4a05      	ldr	r2, [pc, #20]	; (80004d8 <I2C_DI_ACK+0x1c>)
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <I2C_DI_ACK+0x1c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004ca:	6013      	str	r3, [r2, #0]
//}
 80004cc:	2300      	movs	r3, #0

 80004ce:	4618      	mov	r0, r3
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40005400 	.word	0x40005400

080004dc <I2C1_GPIO_Init>:
/*END -----------v1.0-----------*/

/*-----------v1.1-----------*/

/*1. I2C GPIO Configuration PB8 PB9*/
int I2C1_GPIO_Init() {
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;							//Bus clk AHB + GPIOB
 80004e0:	4a14      	ldr	r2, [pc, #80]	; (8000534 <I2C1_GPIO_Init+0x58>)
 80004e2:	4b14      	ldr	r3, [pc, #80]	; (8000534 <I2C1_GPIO_Init+0x58>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f043 0302 	orr.w	r3, r3, #2
 80004ea:	61d3      	str	r3, [r2, #28]

	GPIOB->MODER |= GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1;	//AF mode
 80004ec:	4a12      	ldr	r2, [pc, #72]	; (8000538 <I2C1_GPIO_Init+0x5c>)
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <I2C1_GPIO_Init+0x5c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80004f6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT_8 | GPIO_OTYPER_OT_9;		//Open drain
 80004f8:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <I2C1_GPIO_Init+0x5c>)
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <I2C1_GPIO_Init+0x5c>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000502:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_1 | GPIO_OSPEEDER_OSPEEDR9_1;//Normal speed
 8000504:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <I2C1_GPIO_Init+0x5c>)
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <I2C1_GPIO_Init+0x5c>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800050e:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= (~GPIO_PUPDR_PUPDR8_0) & (~GPIO_PUPDR_PUPDR9_0); 	//No Pull-up
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <I2C1_GPIO_Init+0x5c>)
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <I2C1_GPIO_Init+0x5c>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 800051a:	60d3      	str	r3, [r2, #12]
	//GPIOB->PUPDR |= GPIO_PUPDR_PUPDR8_1 | GPIO_PUPDR_PUPDR9_1; 	//Pull-up
	GPIOB->AFR[1] |= (4U<<GPIO_AFRH_AFRH0_Pos) | (4U<<GPIO_AFRH_AFRH1_Pos); //AF4 = I2C1
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <I2C1_GPIO_Init+0x5c>)
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <I2C1_GPIO_Init+0x5c>)
 8000520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000522:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000526:	6253      	str	r3, [r2, #36]	; 0x24

	return DONE;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40023800 	.word	0x40023800
 8000538:	40020400 	.word	0x40020400

0800053c <I2C1_Init>:

/*2. I2C1 Configuration*/
int I2C1_Init() {
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;	// Bus clk APB1 + I2C1
 8000540:	4a14      	ldr	r2, [pc, #80]	; (8000594 <I2C1_Init+0x58>)
 8000542:	4b14      	ldr	r3, [pc, #80]	; (8000594 <I2C1_Init+0x58>)
 8000544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000546:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800054a:	6253      	str	r3, [r2, #36]	; 0x24

    I2C1->CR1 |= I2C_CR1_SWRST;           // Reset
 800054c:	4a12      	ldr	r2, [pc, #72]	; (8000598 <I2C1_Init+0x5c>)
 800054e:	4b12      	ldr	r3, [pc, #72]	; (8000598 <I2C1_Init+0x5c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000556:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000558:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <I2C1_Init+0x5c>)
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <I2C1_Init+0x5c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000562:	6013      	str	r3, [r2, #0]

    I2C1->CR2 = I2C1->CR2 = I2C_CR2_FREQ_5;	// 32MHz PCLK1
 8000564:	4a0c      	ldr	r2, [pc, #48]	; (8000598 <I2C1_Init+0x5c>)
 8000566:	490c      	ldr	r1, [pc, #48]	; (8000598 <I2C1_Init+0x5c>)
 8000568:	2320      	movs	r3, #32
 800056a:	604b      	str	r3, [r1, #4]
 800056c:	6053      	str	r3, [r2, #4]
    I2C1->CCR = 160;                       // 100kHz SCL
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <I2C1_Init+0x5c>)
 8000570:	22a0      	movs	r2, #160	; 0xa0
 8000572:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = I2C1->TRISE = 32;        // Max rise time
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <I2C1_Init+0x5c>)
 8000576:	4908      	ldr	r1, [pc, #32]	; (8000598 <I2C1_Init+0x5c>)
 8000578:	2320      	movs	r3, #32
 800057a:	620b      	str	r3, [r1, #32]
 800057c:	6213      	str	r3, [r2, #32]

    I2C1->CR1 |= I2C_CR1_PE;              // Enable I2C
 800057e:	4a06      	ldr	r2, [pc, #24]	; (8000598 <I2C1_Init+0x5c>)
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <I2C1_Init+0x5c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]

    return DONE;
 800058a:	2300      	movs	r3, #0
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40023800 	.word	0x40023800
 8000598:	40005400 	.word	0x40005400

0800059c <main>:

SGP30_Data_t air_quality;

int Initial();

int main(void)
 800059c:	b580      	push	{r7, lr}
 800059e:	b08e      	sub	sp, #56	; 0x38
 80005a0:	af00      	add	r7, sp, #0
{
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2232      	movs	r2, #50	; 0x32
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fcf7 	bl	8000f9c <memset>
	char buf[LOG_LENGH]={0};
 80005ae:	f000 f859 	bl	8000664 <Initial>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4923      	ldr	r1, [pc, #140]	; (8000644 <main+0xa8>)
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff fde8 	bl	800018c <check_pass>
	check_pass(Initial(),"Initial");

 80005bc:	4822      	ldr	r0, [pc, #136]	; (8000648 <main+0xac>)
 80005be:	f000 fcab 	bl	8000f18 <uart2_write_string>
	uart2_write_string("-----------------------\n\r");

 80005c2:	f000 f85e 	bl	8000682 <SGP30_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4920      	ldr	r1, [pc, #128]	; (800064c <main+0xb0>)
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff fdde 	bl	800018c <check_pass>
	check_pass(SGP30_Init(),"SGP30_Init");

 80005d0:	200a      	movs	r0, #10
 80005d2:	f000 fadb 	bl	8000b8c <systickDelayMs>
	systickDelayMs(10);

 80005d6:	491e      	ldr	r1, [pc, #120]	; (8000650 <main+0xb4>)
 80005d8:	481e      	ldr	r0, [pc, #120]	; (8000654 <main+0xb8>)
 80005da:	f000 f861 	bl	80006a0 <SGP30_Measure>
 80005de:	4603      	mov	r3, r0
 80005e0:	491d      	ldr	r1, [pc, #116]	; (8000658 <main+0xbc>)
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fdd2 	bl	800018c <check_pass>
	  check_pass(SGP30_Measure(&air_quality.co2_ppm, &air_quality.tvoc_ppb),"SGP30_Measure");

 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <main+0xb8>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80005f0:	d006      	beq.n	8000600 <main+0x64>
 80005f2:	4b18      	ldr	r3, [pc, #96]	; (8000654 <main+0xb8>)
 80005f4:	885b      	ldrh	r3, [r3, #2]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d002      	beq.n	8000600 <main+0x64>
	  if(air_quality.co2_ppm != 400 && air_quality.tvoc_ppb != 0) {
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <main+0xb8>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	711a      	strb	r2, [r3, #4]
		  air_quality.status = 1;  // Valid data
	  }

 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <main+0xb8>)
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d017      	beq.n	8000638 <main+0x9c>
	  if(air_quality.status){
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <main+0xb8>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4912      	ldr	r1, [pc, #72]	; (800065c <main+0xc0>)
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fbc3 	bl	8000d9e <siprintf>
		  sprintf(buf,"CO2 %u ppm\n\r",(unsigned int)air_quality.co2_ppm);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fc7c 	bl	8000f18 <uart2_write_string>
		  uart2_write_string(buf);
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <main+0xb8>)
 8000622:	885b      	ldrh	r3, [r3, #2]
 8000624:	461a      	mov	r2, r3
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	490d      	ldr	r1, [pc, #52]	; (8000660 <main+0xc4>)
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fbb7 	bl	8000d9e <siprintf>
		  sprintf(buf,"TVOC %u ppm\n\r",(unsigned int)air_quality.tvoc_ppb);
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fc70 	bl	8000f18 <uart2_write_string>


  while (1)
  {


 8000638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063c:	f000 faa6 	bl	8000b8c <systickDelayMs>
 8000640:	e7fa      	b.n	8000638 <main+0x9c>
 8000642:	bf00      	nop
 8000644:	080010a0 	.word	0x080010a0
 8000648:	080010a8 	.word	0x080010a8
 800064c:	080010c4 	.word	0x080010c4
 8000650:	20000022 	.word	0x20000022
 8000654:	20000020 	.word	0x20000020
 8000658:	080010d0 	.word	0x080010d0
 800065c:	080010e0 	.word	0x080010e0
 8000660:	080010f0 	.word	0x080010f0

08000664 <Initial>:
	  systickDelayMs(1000);
  }

	return DONE;
}

 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
int Initial(){

 8000668:	f000 f92e 	bl	80008c8 <SetSysClk>
	SetSysClk();
 800066c:	f000 f9e6 	bl	8000a3c <SystemCoreClockUpdate>
	SystemCoreClockUpdate();
 8000670:	f000 fbfc 	bl	8000e6c <uart2_init>
	uart2_init();
 8000674:	f7ff ff32 	bl	80004dc <I2C1_GPIO_Init>
	I2C1_GPIO_Init();
 8000678:	f7ff ff60 	bl	800053c <I2C1_Init>
	I2C1_Init();
 800067c:	2300      	movs	r3, #0
	return DONE;
 800067e:	4618      	mov	r0, r3
 8000680:	bd80      	pop	{r7, pc}

08000682 <SGP30_Init>:
#include "sgp30.h"

int SGP30_Init() {
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
	I2C1_Bus_Test();//check_pass(I2C1_Bus_Test(),"-I2C1_Bus_Test");
 8000686:	f7ff fed7 	bl	8000438 <I2C1_Bus_Test>

	Write_Cmd(CMD_INIT,STOP);//check_pass(Write_Cmd(CMD_INIT,STOP),"-SEND_CMD_INIT");
 800068a:	2101      	movs	r1, #1
 800068c:	f242 0003 	movw	r0, #8195	; 0x2003
 8000690:	f000 f85e 	bl	8000750 <Write_Cmd>

	systickDelayMs(10);
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fa79 	bl	8000b8c <systickDelayMs>

	return DONE;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	bd80      	pop	{r7, pc}

080006a0 <SGP30_Measure>:

int SGP30_Measure(uint16_t *co2, uint16_t *tvoc) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
    uint8_t data[6]={0};
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	809a      	strh	r2, [r3, #4]

    Write_Cmd(CMD_MEASURE,NSTOP);//check_pass(Write_Cmd(CMD_MEASURE,NSTOP),"-SEND_CMD_MEASURE");
 80006b4:	2100      	movs	r1, #0
 80006b6:	f242 0008 	movw	r0, #8200	; 0x2008
 80006ba:	f000 f849 	bl	8000750 <Write_Cmd>

    systickDelayMs(10);
 80006be:	200a      	movs	r0, #10
 80006c0:	f000 fa64 	bl	8000b8c <systickDelayMs>

    Read_Data(data, 6);//check_pass(Read_Data(data, 6),"-READ_CMD_MEASURE");
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2106      	movs	r1, #6
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f866 	bl	800079c <Read_Data>

    // CRC checks
     if (crc(&data[0], 2) != data[2]) {
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f898 	bl	800080c <crc>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	7abb      	ldrb	r3, [r7, #10]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d005      	beq.n	80006f2 <SGP30_Measure+0x52>
     	 uart2_write_string("CO2 CRC check failed\n\r");
 80006e6:	4818      	ldr	r0, [pc, #96]	; (8000748 <SGP30_Measure+0xa8>)
 80006e8:	f000 fc16 	bl	8000f18 <uart2_write_string>

     	 return -1; // CO2 CRC fail
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	e026      	b.n	8000740 <SGP30_Measure+0xa0>
     }
     if (crc(&data[3], 2) != data[5]){
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	3303      	adds	r3, #3
 80006f8:	2102      	movs	r1, #2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f886 	bl	800080c <crc>
 8000700:	4603      	mov	r3, r0
 8000702:	461a      	mov	r2, r3
 8000704:	7b7b      	ldrb	r3, [r7, #13]
 8000706:	429a      	cmp	r2, r3
 8000708:	d005      	beq.n	8000716 <SGP30_Measure+0x76>
     	uart2_write_string("TVOC CRC check failed\n\r");
 800070a:	4810      	ldr	r0, [pc, #64]	; (800074c <SGP30_Measure+0xac>)
 800070c:	f000 fc04 	bl	8000f18 <uart2_write_string>
     	return -2; // TVOC CRC fail
 8000710:	f06f 0301 	mvn.w	r3, #1
 8000714:	e014      	b.n	8000740 <SGP30_Measure+0xa0>
     }

    *co2 = (data[0] << 8) | data[1];   // Skip CRC data[2]
 8000716:	7a3b      	ldrb	r3, [r7, #8]
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	b21a      	sxth	r2, r3
 800071c:	7a7b      	ldrb	r3, [r7, #9]
 800071e:	b21b      	sxth	r3, r3
 8000720:	4313      	orrs	r3, r2
 8000722:	b21b      	sxth	r3, r3
 8000724:	b29a      	uxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	801a      	strh	r2, [r3, #0]
    *tvoc = (data[3] << 8) | data[4];  // Skip CRC data[5]
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	b21a      	sxth	r2, r3
 8000730:	7b3b      	ldrb	r3, [r7, #12]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29a      	uxth	r2, r3
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	801a      	strh	r2, [r3, #0]

    return DONE;
 800073e:	2300      	movs	r3, #0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	08001100 	.word	0x08001100
 800074c:	08001118 	.word	0x08001118

08000750 <Write_Cmd>:

//
// SGP30 I2C 7-bit address (from datasheet)


int Write_Cmd(uint16_t cmd,uint8_t condition) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	460a      	mov	r2, r1
 800075a:	80fb      	strh	r3, [r7, #6]
 800075c:	4613      	mov	r3, r2
 800075e:	717b      	strb	r3, [r7, #5]
	I2C_Start(); //check_pass(I2C_Start(),"---I2C_Start");
 8000760:	f7ff fe04 	bl	800036c <I2C_Start>
	I2C_Write_Addr(SGP30_ADDR << 1);//check_pass(I2C_Write_Addr(SGP30_ADDR << 1),"---I2C_Write_Addr + W");
 8000764:	20b0      	movs	r0, #176	; 0xb0
 8000766:	f7ff fe17 	bl	8000398 <I2C_Write_Addr>

	I2C_Clear_AddrFlag();//check_pass(I2C_Clear_AddrFlag(),"I2C_Clear_AddrFlag");
 800076a:	f7ff fe47 	bl	80003fc <I2C_Clear_AddrFlag>

	I2C_Write_Data(cmd >> 8); //check_pass(I2C_Write_Data(cmd >> 8),"---I2C_Write_Data");
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	b29b      	uxth	r3, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fe28 	bl	80003cc <I2C_Write_Data>
	I2C_Write_Data(cmd & 0xFF);//check_pass(I2C_Write_Data(cmd & 0xFF),"---I2C_Write_Data");
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fe23 	bl	80003cc <I2C_Write_Data>

    if(condition) I2C_Stop();//check_pass(I2C_Stop(),"---I2C_Stop");
 8000786:	797b      	ldrb	r3, [r7, #5]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <Write_Cmd+0x40>
 800078c:	f7ff fe3e 	bl	800040c <I2C_Stop>

    return DONE;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <Read_Data>:

int Read_Data(uint8_t *data, uint8_t len) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
	I2C_Start();//check_pass(I2C_Start(),"---I2C_Start");
 80007a8:	f7ff fde0 	bl	800036c <I2C_Start>

	I2C_Write_Addr((SGP30_ADDR << 1) | 1);//check_pass(I2C_Write_Addr((SGP30_ADDR << 1) | 1),"---I2C_Write_Addr + R");
 80007ac:	20b1      	movs	r0, #177	; 0xb1
 80007ae:	f7ff fdf3 	bl	8000398 <I2C_Write_Addr>

	I2C_EN_ACK();//check_pass(I2C_EN_ACK(),"---I2C_EN_ACK");
 80007b2:	f7ff fe73 	bl	800049c <I2C_EN_ACK>

	I2C_Clear_AddrFlag();//check_pass(I2C_Clear_AddrFlag(),"I2C_Clear_AddrFlag");
 80007b6:	f7ff fe21 	bl	80003fc <I2C_Clear_AddrFlag>

	for(int i=0; i<len;i++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	e019      	b.n	80007f4 <Read_Data+0x58>
	{
		while(!(I2C1->SR1 & I2C_SR1_RXNE)){}
 80007c0:	bf00      	nop
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <Read_Data+0x6c>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f9      	beq.n	80007c2 <Read_Data+0x26>

		data[i] = I2C1->DR;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	4413      	add	r3, r2
 80007d4:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <Read_Data+0x6c>)
 80007d6:	6912      	ldr	r2, [r2, #16]
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	701a      	strb	r2, [r3, #0]

		//Handle last byte - send NACK and STOP before read
		if(i==len-1){
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	1e5a      	subs	r2, r3, #1
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d103      	bne.n	80007ee <Read_Data+0x52>
			I2C_DI_ACK();//check_pass(I2C_DI_ACK(),"---I2C_DI_ACK");
 80007e6:	f7ff fe69 	bl	80004bc <I2C_DI_ACK>
			I2C_Stop();//check_pass(I2C_Stop(),"---I2C_Stop");
 80007ea:	f7ff fe0f 	bl	800040c <I2C_Stop>
	for(int i=0; i<len;i++)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3301      	adds	r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	78fa      	ldrb	r2, [r7, #3]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	dce1      	bgt.n	80007c0 <Read_Data+0x24>
		}
	}

    return DONE;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40005400 	.word	0x40005400

0800080c <crc>:

// CRC8 algorithm for SGP30 (Polynomial 0x31, init 0xFF)
uint8_t crc(uint8_t *data, int count) {
 800080c:	b480      	push	{r7}
 800080e:	b087      	sub	sp, #28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xFF;
 8000816:	23ff      	movs	r3, #255	; 0xff
 8000818:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < count; i++) {
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	e022      	b.n	8000866 <crc+0x5a>
        crc ^= data[i];
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	7dfb      	ldrb	r3, [r7, #23]
 800082a:	4053      	eors	r3, r2
 800082c:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e012      	b.n	800085a <crc+0x4e>
            crc = (crc & 0x80) ? (crc << 1) ^ 0x31 : (crc << 1);
 8000834:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000838:	2b00      	cmp	r3, #0
 800083a:	da07      	bge.n	800084c <crc+0x40>
 800083c:	7dfb      	ldrb	r3, [r7, #23]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	b25b      	sxtb	r3, r3
 8000842:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000846:	b25b      	sxtb	r3, r3
 8000848:	b2db      	uxtb	r3, r3
 800084a:	e002      	b.n	8000852 <crc+0x46>
 800084c:	7dfb      	ldrb	r3, [r7, #23]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	3301      	adds	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	2b07      	cmp	r3, #7
 800085e:	dde9      	ble.n	8000834 <crc+0x28>
    for (int i = 0; i < count; i++) {
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	3301      	adds	r3, #1
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	429a      	cmp	r2, r3
 800086c:	dbd8      	blt.n	8000820 <crc+0x14>
    }
    return crc;
 800086e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000870:	4618      	mov	r0, r3
 8000872:	371c      	adds	r7, #28
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
	...

0800087c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800087c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800087e:	e003      	b.n	8000888 <LoopCopyDataInit>

08000880 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000882:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000884:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000886:	3104      	adds	r1, #4

08000888 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000888:	480a      	ldr	r0, [pc, #40]	; (80008b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800088c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800088e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000890:	d3f6      	bcc.n	8000880 <CopyDataInit>
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000894:	e002      	b.n	800089c <LoopFillZerobss>

08000896 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000898:	f842 3b04 	str.w	r3, [r2], #4

0800089c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800089e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008a0:	d3f9      	bcc.n	8000896 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008a2:	f000 f897 	bl	80009d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008a6:	f000 fb55 	bl	8000f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008aa:	f7ff fe77 	bl	800059c <main>
  bx lr
 80008ae:	4770      	bx	lr
  ldr r3, =_sidata
 80008b0:	0800116c 	.word	0x0800116c
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008b8:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80008bc:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80008c0:	2000002c 	.word	0x2000002c

080008c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_IRQHandler>
	...

080008c8 <SetSysClk>:
 * */

#include "include.h"

void SetSysClk(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
	uint32_t status = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]

  /*1. Enable HSI High speed internal clock*/
  RCC->CR |= RCC_CR_HSION;
 80008d2:	4a3d      	ldr	r2, [pc, #244]	; (80009c8 <SetSysClk+0x100>)
 80008d4:	4b3c      	ldr	r3, [pc, #240]	; (80009c8 <SetSysClk+0x100>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6013      	str	r3, [r2, #0]

  /*2. Waits for the HSI to stabilize. */
 while(!(RCC->CR & RCC_CR_HSIRDY)){} //CR bit 1 HSIRDY sets when HSI oscillator is stable. p141
 80008de:	bf00      	nop
 80008e0:	4b39      	ldr	r3, [pc, #228]	; (80009c8 <SetSysClk+0x100>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0f9      	beq.n	80008e0 <SetSysClk+0x18>
 status = (RCC->CR & RCC_CR_HSIRDY) ? 1 : 0; //if CR bit 1 HSIDRY high when oscillator is stable.
 80008ec:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <SetSysClk+0x100>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f003 0302 	and.w	r3, r3, #2
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	bf14      	ite	ne
 80008f8:	2301      	movne	r3, #1
 80008fa:	2300      	moveq	r3, #0
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	607b      	str	r3, [r7, #4]

 if (status == 1) //If HSI ready
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d10b      	bne.n	800091e <SetSysClk+0x56>
  {
    /*3.  PLL (Phase-Locked Loop)configuration to generate 32MHz*/
	  //PLLSCR bit 16, PLLMUL bits 18-21, PLLDIV bits 22,23.
	  //0000 0000 1111 1101 0000 0000 0000 0000 corresponding bits
	  //these bits PLLSRC, PLLMUL and PLLDIV cleared
	  RCC->CFGR &= ~(0x00FD0000);
 8000906:	4a30      	ldr	r2, [pc, #192]	; (80009c8 <SetSysClk+0x100>)
 8000908:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <SetSysClk+0x100>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000910:	6093      	str	r3, [r2, #8]

	  //PLLMUL must be 0001 when multiplication=4 and PLLDIV must be 01 when division=2
	  //PLLCLK = (HSI * 4)/2 = 32 MHz p144/911
	  //PLLSCR bit 16 must be 1 --> HSE oscillator clock selected as PLL input clock (done in previous line)
	  //0000 0000 0100 0100 0000 0000 0000 0000
	  RCC->CFGR |= 0x00440000;
 8000912:	4a2d      	ldr	r2, [pc, #180]	; (80009c8 <SetSysClk+0x100>)
 8000914:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <SetSysClk+0x100>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 800091c:	6093      	str	r3, [r2, #8]
  {
    /* If HSI fails to start-up, the application will have wrong clock configuration. EX: toggle LED*/
  }

 /*4. Configures the Flash memory for optimal performance at 32 MHz by enabling 64-bit access, prefetch, and setting one wait state. */
   FLASH->ACR |= FLASH_ACR_ACC64; //ACC64 bit 2, 64-bit access. 64-bit access is used to improve the performance. p84
 800091e:	4a2b      	ldr	r2, [pc, #172]	; (80009cc <SetSysClk+0x104>)
 8000920:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <SetSysClk+0x104>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6013      	str	r3, [r2, #0]
     /*Prefetch is enabled by setting the PRFTEN bit in the FLASH_ACR register.
     *This feature is useful if at least one wait state is needed to access the Flash memory.
 	*Figure 5 shows the execution of sequential 32-bit instructions*/
   FLASH->ACR |= FLASH_ACR_PRFTEN; //PRFTEN bit 1, prefetch enable. p84
 800092a:	4a28      	ldr	r2, [pc, #160]	; (80009cc <SetSysClk+0x104>)
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <SetSysClk+0x104>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6013      	str	r3, [r2, #0]
   FLASH->ACR |= FLASH_ACR_LATENCY; //LATENCY one wait state bit 0. One wait state enabled. p84. p59
 8000936:	4a25      	ldr	r2, [pc, #148]	; (80009cc <SetSysClk+0x104>)
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <SetSysClk+0x104>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6013      	str	r3, [r2, #0]

	/*5. Enables the power interface clock and configures the voltage regulator to supply 1.8V, waiting for it to stabilize.*/
	 RCC->APB1ENR |= RCC_APB1ENR_PWREN; //bit 28 PWREN: Power interface clock enable. p158. p101
 8000942:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <SetSysClk+0x100>)
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <SetSysClk+0x100>)
 8000946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6253      	str	r3, [r2, #36]	; 0x24
	 PWR->CR = PWR_CR_VOS_0; //Bits 12:11 VOS[1:0]: Voltage scaling range selection, 01: 1.8 V (range 1). p121
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <SetSysClk+0x108>)
 8000950:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000954:	601a      	str	r2, [r3, #0]
	of PWR_CR register. p102 1.8V needed for 32 MHz clock and lower voltages to save power.

	0: Regulator is ready in the selected voltage range
	1: Regulator voltage output is changing to the required VOS level.
	*/
	 while((PWR->CSR & PWR_CSR_VOSF)){} //bit 4 VOSF: Voltage Scaling select flag. p125
 8000956:	bf00      	nop
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <SetSysClk+0x108>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f003 0310 	and.w	r3, r3, #16
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1f9      	bne.n	8000958 <SetSysClk+0x90>

	/*6. No-prescalers for the AHB, APB1, and APB2 buses, effectively setting them to run at the same frequency as the system clock.*/
	RCC->CFGR &= ~RCC_CFGR_HPRE_3; //Bits 7:4 HPRE[3:0]: AHB prescaler. 0xxx: SYSCLK not divided. p144
 8000964:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <SetSysClk+0x100>)
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <SetSysClk+0x100>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800096e:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2_2; //Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2). p144
 8000970:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <SetSysClk+0x100>)
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <SetSysClk+0x100>)
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800097a:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1_2; //Bits 10:8 PPRE1[2:0]: APB low-speed prescaler (APB1)p. 144
 800097c:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <SetSysClk+0x100>)
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <SetSysClk+0x100>)
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000986:	6093      	str	r3, [r2, #8]

	/*7. Enables the PLL.*/
	RCC->CR |= RCC_CR_PLLON; //Bit 24 PLLON: PLL enable. p140
 8000988:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <SetSysClk+0x100>)
 800098a:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <SetSysClk+0x100>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000992:	6013      	str	r3, [r2, #0]

	/*8. Waits for the PLL to stabilize. */
	while(!(RCC->CR & RCC_CR_PLLRDY)){} //Bit 25 PLLRDY: PLL clock ready flag. p140
 8000994:	bf00      	nop
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <SetSysClk+0x100>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0f9      	beq.n	8000996 <SetSysClk+0xce>

	/*9. Switches the system clock source to the configured PLL output (32 MHz).*/
	RCC->CFGR |= 0x3U; //Bits 1:0 SW[1:0]: System clock switch, 11: PLL used as system clock
 80009a2:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <SetSysClk+0x100>)
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <SetSysClk+0x100>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	f043 0303 	orr.w	r3, r3, #3
 80009ac:	6093      	str	r3, [r2, #8]

	/*Bits 3:2 SWS[1:0]: System clock switch status, 11: PLL used as system clock.
	 * These bits are set and cleared by hardware to indicate which clock source is used as
	system clock. 11: PLL used as system clock. p145.
	 Waits for the system clock to confirm it's using the PLL. */
	while (!(RCC->CFGR & RCC_CFGR_SWS)){}
 80009ae:	bf00      	nop
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SetSysClk+0x100>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f003 030c 	and.w	r3, r3, #12
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d0f9      	beq.n	80009b0 <SetSysClk+0xe8>

	//Update system clock after config.
	SystemCoreClockUpdate();
 80009bc:	f000 f83e 	bl	8000a3c <SystemCoreClockUpdate>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40023c00 	.word	0x40023c00
 80009d0:	40007000 	.word	0x40007000

080009d4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80009d8:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <SystemInit+0x5c>)
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <SystemInit+0x5c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e2:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80009e4:	4912      	ldr	r1, [pc, #72]	; (8000a30 <SystemInit+0x5c>)
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <SystemInit+0x5c>)
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <SystemInit+0x60>)
 80009ec:	4013      	ands	r3, r2
 80009ee:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80009f0:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <SystemInit+0x5c>)
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <SystemInit+0x5c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80009fa:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80009fe:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a00:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <SystemInit+0x5c>)
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <SystemInit+0x5c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000a0c:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <SystemInit+0x5c>)
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <SystemInit+0x5c>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000a16:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <SystemInit+0x5c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <SystemInit+0x64>)
 8000a20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a24:	609a      	str	r2, [r3, #8]
#endif
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	88ffc00c 	.word	0x88ffc00c
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a56:	4b48      	ldr	r3, [pc, #288]	; (8000b78 <SystemCoreClockUpdate+0x13c>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	f003 030c 	and.w	r3, r3, #12
 8000a5e:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	2b0c      	cmp	r3, #12
 8000a64:	d863      	bhi.n	8000b2e <SystemCoreClockUpdate+0xf2>
 8000a66:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <SystemCoreClockUpdate+0x30>)
 8000a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6c:	08000aa1 	.word	0x08000aa1
 8000a70:	08000b2f 	.word	0x08000b2f
 8000a74:	08000b2f 	.word	0x08000b2f
 8000a78:	08000b2f 	.word	0x08000b2f
 8000a7c:	08000ac1 	.word	0x08000ac1
 8000a80:	08000b2f 	.word	0x08000b2f
 8000a84:	08000b2f 	.word	0x08000b2f
 8000a88:	08000b2f 	.word	0x08000b2f
 8000a8c:	08000ac9 	.word	0x08000ac9
 8000a90:	08000b2f 	.word	0x08000b2f
 8000a94:	08000b2f 	.word	0x08000b2f
 8000a98:	08000b2f 	.word	0x08000b2f
 8000a9c:	08000ad1 	.word	0x08000ad1
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000aa0:	4b35      	ldr	r3, [pc, #212]	; (8000b78 <SystemCoreClockUpdate+0x13c>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	0b5b      	lsrs	r3, r3, #13
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <SystemCoreClockUpdate+0x140>)
 8000abc:	601a      	str	r2, [r3, #0]
      break;
 8000abe:	e046      	b.n	8000b4e <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <SystemCoreClockUpdate+0x140>)
 8000ac2:	4a2f      	ldr	r2, [pc, #188]	; (8000b80 <SystemCoreClockUpdate+0x144>)
 8000ac4:	601a      	str	r2, [r3, #0]
      break;
 8000ac6:	e042      	b.n	8000b4e <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <SystemCoreClockUpdate+0x140>)
 8000aca:	4a2d      	ldr	r2, [pc, #180]	; (8000b80 <SystemCoreClockUpdate+0x144>)
 8000acc:	601a      	str	r2, [r3, #0]
      break;
 8000ace:	e03e      	b.n	8000b4e <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000ad0:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <SystemCoreClockUpdate+0x13c>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000ad8:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000ada:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <SystemCoreClockUpdate+0x13c>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000ae2:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	0c9b      	lsrs	r3, r3, #18
 8000ae8:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <SystemCoreClockUpdate+0x148>)
 8000aea:	5cd3      	ldrb	r3, [r2, r3]
 8000aec:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	0d9b      	lsrs	r3, r3, #22
 8000af2:	3301      	adds	r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <SystemCoreClockUpdate+0x13c>)
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afe:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d109      	bne.n	8000b1a <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <SystemCoreClockUpdate+0x144>)
 8000b0a:	fb02 f203 	mul.w	r2, r2, r3
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b14:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <SystemCoreClockUpdate+0x140>)
 8000b16:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000b18:	e019      	b.n	8000b4e <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <SystemCoreClockUpdate+0x144>)
 8000b1e:	fb02 f203 	mul.w	r2, r2, r3
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <SystemCoreClockUpdate+0x140>)
 8000b2a:	6013      	str	r3, [r2, #0]
      break;
 8000b2c:	e00f      	b.n	8000b4e <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <SystemCoreClockUpdate+0x13c>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	0b5b      	lsrs	r3, r3, #13
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <SystemCoreClockUpdate+0x140>)
 8000b4a:	601a      	str	r2, [r3, #0]
      break;
 8000b4c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <SystemCoreClockUpdate+0x13c>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	091b      	lsrs	r3, r3, #4
 8000b54:	f003 030f 	and.w	r3, r3, #15
 8000b58:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <SystemCoreClockUpdate+0x14c>)
 8000b5a:	5cd3      	ldrb	r3, [r2, r3]
 8000b5c:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <SystemCoreClockUpdate+0x140>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	fa22 f303 	lsr.w	r3, r2, r3
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <SystemCoreClockUpdate+0x140>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	371c      	adds	r7, #28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	007a1200 	.word	0x007a1200
 8000b84:	08001148 	.word	0x08001148
 8000b88:	08001154 	.word	0x08001154

08000b8c <systickDelayMs>:
#include "include.h"
void systickDelayMs(uint32_t delay){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	//Systick
		SysTick->LOAD = 32000; //Reload with number of clocks per 1 ms (1x10^-3 x 32x10^6)
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <systickDelayMs+0x50>)
 8000b96:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000b9a:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;//Clear systick current value
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <systickDelayMs+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
		SysTick->CTRL = SysTick_CTRL_ENABLE | SysTick_CTRL_CLKSOURCE;//Enable systick and select internal clk src
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <systickDelayMs+0x50>)
 8000ba4:	2205      	movs	r2, #5
 8000ba6:	601a      	str	r2, [r3, #0]

		for(uint32_t i = 0; i<delay;i++){
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	e009      	b.n	8000bc2 <systickDelayMs+0x36>
			//Wait until the COUNTFLAG is set
			while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG)){}
 8000bae:	bf00      	nop
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <systickDelayMs+0x50>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d0f9      	beq.n	8000bb0 <systickDelayMs+0x24>
		for(uint32_t i = 0; i<delay;i++){
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d3f1      	bcc.n	8000bae <systickDelayMs+0x22>
		}
		SysTick->CTRL = 0;
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <systickDelayMs+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b087      	sub	sp, #28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000bf0:	e004      	b.n	8000bfc <ts_itoa+0x1c>
		div *= base;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	fb02 f303 	mul.w	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d2f3      	bcs.n	8000bf2 <ts_itoa+0x12>

	while (div != 0)
 8000c0a:	e029      	b.n	8000c60 <ts_itoa+0x80>
	{
		int num = d/div;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c14:	613b      	str	r3, [r7, #16]
		d = d%div;
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c1e:	fb02 f201 	mul.w	r2, r2, r1
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	2b09      	cmp	r3, #9
 8000c34:	dd0a      	ble.n	8000c4c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	1c59      	adds	r1, r3, #1
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	6011      	str	r1, [r2, #0]
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	3237      	adds	r2, #55	; 0x37
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e009      	b.n	8000c60 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	1c59      	adds	r1, r3, #1
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	6011      	str	r1, [r2, #0]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	3230      	adds	r2, #48	; 0x30
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1d2      	bne.n	8000c0c <ts_itoa+0x2c>
	}
}
 8000c66:	bf00      	nop
 8000c68:	371c      	adds	r7, #28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000c80:	e07d      	b.n	8000d7e <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b25      	cmp	r3, #37	; 0x25
 8000c88:	d171      	bne.n	8000d6e <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b64      	cmp	r3, #100	; 0x64
 8000c96:	d01e      	beq.n	8000cd6 <ts_formatstring+0x66>
 8000c98:	2b64      	cmp	r3, #100	; 0x64
 8000c9a:	dc06      	bgt.n	8000caa <ts_formatstring+0x3a>
 8000c9c:	2b58      	cmp	r3, #88	; 0x58
 8000c9e:	d050      	beq.n	8000d42 <ts_formatstring+0xd2>
 8000ca0:	2b63      	cmp	r3, #99	; 0x63
 8000ca2:	d00e      	beq.n	8000cc2 <ts_formatstring+0x52>
 8000ca4:	2b25      	cmp	r3, #37	; 0x25
 8000ca6:	d058      	beq.n	8000d5a <ts_formatstring+0xea>
 8000ca8:	e05d      	b.n	8000d66 <ts_formatstring+0xf6>
 8000caa:	2b73      	cmp	r3, #115	; 0x73
 8000cac:	d02b      	beq.n	8000d06 <ts_formatstring+0x96>
 8000cae:	2b73      	cmp	r3, #115	; 0x73
 8000cb0:	dc02      	bgt.n	8000cb8 <ts_formatstring+0x48>
 8000cb2:	2b69      	cmp	r3, #105	; 0x69
 8000cb4:	d00f      	beq.n	8000cd6 <ts_formatstring+0x66>
 8000cb6:	e056      	b.n	8000d66 <ts_formatstring+0xf6>
 8000cb8:	2b75      	cmp	r3, #117	; 0x75
 8000cba:	d037      	beq.n	8000d2c <ts_formatstring+0xbc>
 8000cbc:	2b78      	cmp	r3, #120	; 0x78
 8000cbe:	d040      	beq.n	8000d42 <ts_formatstring+0xd2>
 8000cc0:	e051      	b.n	8000d66 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	1c5a      	adds	r2, r3, #1
 8000cc6:	60fa      	str	r2, [r7, #12]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	1d11      	adds	r1, r2, #4
 8000ccc:	6079      	str	r1, [r7, #4]
 8000cce:	6812      	ldr	r2, [r2, #0]
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	701a      	strb	r2, [r3, #0]
				break;
 8000cd4:	e047      	b.n	8000d66 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	1d1a      	adds	r2, r3, #4
 8000cda:	607a      	str	r2, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da07      	bge.n	8000cf6 <ts_formatstring+0x86>
					{
						val *= -1;
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	425b      	negs	r3, r3
 8000cea:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	60fa      	str	r2, [r7, #12]
 8000cf2:	222d      	movs	r2, #45	; 0x2d
 8000cf4:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8000cf6:	69f9      	ldr	r1, [r7, #28]
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	220a      	movs	r2, #10
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff6e 	bl	8000be0 <ts_itoa>
				}
				break;
 8000d04:	e02f      	b.n	8000d66 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	1d1a      	adds	r2, r3, #4
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8000d10:	e007      	b.n	8000d22 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	60fa      	str	r2, [r7, #12]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	1c51      	adds	r1, r2, #1
 8000d1c:	61b9      	str	r1, [r7, #24]
 8000d1e:	7812      	ldrb	r2, [r2, #0]
 8000d20:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f3      	bne.n	8000d12 <ts_formatstring+0xa2>
					}
				}
				break;
 8000d2a:	e01c      	b.n	8000d66 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	1d1a      	adds	r2, r3, #4
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	6819      	ldr	r1, [r3, #0]
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	220a      	movs	r2, #10
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff50 	bl	8000be0 <ts_itoa>
				break;
 8000d40:	e011      	b.n	8000d66 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	1d1a      	adds	r2, r3, #4
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2210      	movs	r2, #16
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff44 	bl	8000be0 <ts_itoa>
				break;
 8000d58:	e005      	b.n	8000d66 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	60fa      	str	r2, [r7, #12]
 8000d60:	2225      	movs	r2, #37	; 0x25
 8000d62:	701a      	strb	r2, [r3, #0]
				  break;
 8000d64:	bf00      	nop
			}
			fmt++;
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	e007      	b.n	8000d7e <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	1c5a      	adds	r2, r3, #1
 8000d72:	60fa      	str	r2, [r7, #12]
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	1c51      	adds	r1, r2, #1
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	7812      	ldrb	r2, [r2, #0]
 8000d7c:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f47f af7d 	bne.w	8000c82 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	461a      	mov	r2, r3
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	1ad3      	subs	r3, r2, r3
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8000d9e:	b40e      	push	{r1, r2, r3}
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8000da8:	f107 0320 	add.w	r3, r7, #32
 8000dac:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	69f9      	ldr	r1, [r7, #28]
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ff5c 	bl	8000c70 <ts_formatstring>
 8000db8:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dc6:	b003      	add	sp, #12
 8000dc8:	4770      	bx	lr
	...

08000dcc <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff f9d1 	bl	800017c <strlen>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	2001      	movs	r0, #1
 8000de8:	f000 f8fc 	bl	8000fe4 <_write>
 8000dec:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8000dee:	2201      	movs	r2, #1
 8000df0:	490b      	ldr	r1, [pc, #44]	; (8000e20 <puts+0x54>)
 8000df2:	2001      	movs	r0, #1
 8000df4:	f000 f8f6 	bl	8000fe4 <_write>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d102      	bne.n	8000e10 <puts+0x44>
	{
		res = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	e002      	b.n	8000e16 <puts+0x4a>
	}
	else
	{
		res = EOF;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
 8000e14:	617b      	str	r3, [r7, #20]
	}

	return res;
 8000e16:	697b      	ldr	r3, [r7, #20]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	08001144 	.word	0x08001144

08000e24 <compute_uart_bd>:
#include "include.h"
#define SYS_FREQ 32000000
#define UART_BAUDRATE 9600

uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2))/BaudRate);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	085a      	lsrs	r2, r3, #1
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	441a      	add	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3c:	b29b      	uxth	r3, r3
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <uart_set_baudrate>:
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	68b8      	ldr	r0, [r7, #8]
 8000e58:	f7ff ffe4 	bl	8000e24 <compute_uart_bd>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	609a      	str	r2, [r3, #8]
}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <uart2_init>:
void uart2_init()
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	//Enable clock access to gpioA
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000e70:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <uart2_init+0x70>)
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <uart2_init+0x70>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	61d3      	str	r3, [r2, #28]
	//Set gpio PA2 mode alternate function
	GPIOA->MODER |= GPIO_MODER_MODER2_1;
 8000e7c:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <uart2_init+0x74>)
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <uart2_init+0x74>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f043 0320 	orr.w	r3, r3, #32
 8000e86:	6013      	str	r3, [r2, #0]
	//Set gpio PA2 type UART_TX (AF07)
	GPIOA->AFR[0] |= 0x7U<<GPIO_AFRL_AFRL2_Pos; //0:AFRL 1:AFRH
 8000e88:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <uart2_init+0x74>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <uart2_init+0x74>)
 8000e8c:	6a1b      	ldr	r3, [r3, #32]
 8000e8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000e92:	6213      	str	r3, [r2, #32]

	//Set gpio PA3 mode alternate function
	GPIOA->MODER |= GPIO_MODER_MODER3_1;
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <uart2_init+0x74>)
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <uart2_init+0x74>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9e:	6013      	str	r3, [r2, #0]
	//Set gpio PA3 type UART_RX (AF07)
	GPIOA->AFR[0] |= 0x7U<<GPIO_AFRL_AFRL3_Pos; //0:AFRL 1:AFRH
 8000ea0:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <uart2_init+0x74>)
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <uart2_init+0x74>)
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000eaa:	6213      	str	r3, [r2, #32]

	//Enable clock access uart2
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; //STM32L152_reference_manual.pdf p158/911
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <uart2_init+0x70>)
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <uart2_init+0x70>)
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb6:	6253      	str	r3, [r2, #36]	; 0x24
	//Configure baudrate
	uart_set_baudrate(USART2,SYS_FREQ,UART_BAUDRATE);
 8000eb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ebc:	4909      	ldr	r1, [pc, #36]	; (8000ee4 <uart2_init+0x78>)
 8000ebe:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <uart2_init+0x7c>)
 8000ec0:	f7ff ffc2 	bl	8000e48 <uart_set_baudrate>

	//Config transfer direction
	USART2->CR1 = USART_CR1_TE | USART_CR1_RE; //TE:Transmit Enable, RE:Receive Enable
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <uart2_init+0x7c>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	60da      	str	r2, [r3, #12]


	//Enable uart module
	USART2->CR1 |= USART_CR1_UE; //UE: UART Enable
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <uart2_init+0x7c>)
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <uart2_init+0x7c>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ed4:	60d3      	str	r3, [r2, #12]

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	01e84800 	.word	0x01e84800
 8000ee8:	40004400 	.word	0x40004400

08000eec <uart2_write>:
void uart2_write(unsigned char ch)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	//Make sure the transmit data register is empty
	while(!(USART2->SR & USART_SR_TXE)){}
 8000ef6:	bf00      	nop
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <uart2_write+0x28>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f9      	beq.n	8000ef8 <uart2_write+0xc>

	//Write to transmit data register
	USART2->DR = ch;
 8000f04:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <uart2_write+0x28>)
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	6053      	str	r3, [r2, #4]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	40004400 	.word	0x40004400

08000f18 <uart2_write_string>:
void uart2_write_string(char* ch){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
	while(ch[i]!='\0'){
 8000f24:	e009      	b.n	8000f3a <uart2_write_string+0x22>
		uart2_write(ch[i]);
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ffdc 	bl	8000eec <uart2_write>
		i++;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	3301      	adds	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
	while(ch[i]!='\0'){
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1ef      	bne.n	8000f26 <uart2_write_string+0xe>
	}
	i=0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <__libc_init_array>:
 8000f54:	b570      	push	{r4, r5, r6, lr}
 8000f56:	2500      	movs	r5, #0
 8000f58:	4e0c      	ldr	r6, [pc, #48]	; (8000f8c <__libc_init_array+0x38>)
 8000f5a:	4c0d      	ldr	r4, [pc, #52]	; (8000f90 <__libc_init_array+0x3c>)
 8000f5c:	1ba4      	subs	r4, r4, r6
 8000f5e:	10a4      	asrs	r4, r4, #2
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	d109      	bne.n	8000f78 <__libc_init_array+0x24>
 8000f64:	f000 f846 	bl	8000ff4 <_init>
 8000f68:	2500      	movs	r5, #0
 8000f6a:	4e0a      	ldr	r6, [pc, #40]	; (8000f94 <__libc_init_array+0x40>)
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	; (8000f98 <__libc_init_array+0x44>)
 8000f6e:	1ba4      	subs	r4, r4, r6
 8000f70:	10a4      	asrs	r4, r4, #2
 8000f72:	42a5      	cmp	r5, r4
 8000f74:	d105      	bne.n	8000f82 <__libc_init_array+0x2e>
 8000f76:	bd70      	pop	{r4, r5, r6, pc}
 8000f78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f7c:	4798      	blx	r3
 8000f7e:	3501      	adds	r5, #1
 8000f80:	e7ee      	b.n	8000f60 <__libc_init_array+0xc>
 8000f82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f86:	4798      	blx	r3
 8000f88:	3501      	adds	r5, #1
 8000f8a:	e7f2      	b.n	8000f72 <__libc_init_array+0x1e>
 8000f8c:	08001164 	.word	0x08001164
 8000f90:	08001164 	.word	0x08001164
 8000f94:	08001164 	.word	0x08001164
 8000f98:	08001168 	.word	0x08001168

08000f9c <memset>:
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4402      	add	r2, r0
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d100      	bne.n	8000fa6 <memset+0xa>
 8000fa4:	4770      	bx	lr
 8000fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8000faa:	e7f9      	b.n	8000fa0 <memset+0x4>

08000fac <strcpy>:
 8000fac:	4603      	mov	r3, r0
 8000fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000fb2:	f803 2b01 	strb.w	r2, [r3], #1
 8000fb6:	2a00      	cmp	r2, #0
 8000fb8:	d1f9      	bne.n	8000fae <strcpy+0x2>
 8000fba:	4770      	bx	lr

08000fbc <strncat>:
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b530      	push	{r4, r5, lr}
 8000fc0:	781c      	ldrb	r4, [r3, #0]
 8000fc2:	1c5d      	adds	r5, r3, #1
 8000fc4:	b944      	cbnz	r4, 8000fd8 <strncat+0x1c>
 8000fc6:	f112 32ff 	adds.w	r2, r2, #4294967295
 8000fca:	d304      	bcc.n	8000fd6 <strncat+0x1a>
 8000fcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000fd0:	f803 4b01 	strb.w	r4, [r3], #1
 8000fd4:	b914      	cbnz	r4, 8000fdc <strncat+0x20>
 8000fd6:	bd30      	pop	{r4, r5, pc}
 8000fd8:	462b      	mov	r3, r5
 8000fda:	e7f1      	b.n	8000fc0 <strncat+0x4>
 8000fdc:	2a00      	cmp	r2, #0
 8000fde:	d1f2      	bne.n	8000fc6 <strncat+0xa>
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e7f0      	b.n	8000fc6 <strncat+0xa>

08000fe4 <_write>:
 8000fe4:	2258      	movs	r2, #88	; 0x58
 8000fe6:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <_write+0xc>)
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	4770      	bx	lr
 8000ff0:	20000028 	.word	0x20000028

08000ff4 <_init>:
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff6:	bf00      	nop
 8000ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ffa:	bc08      	pop	{r3}
 8000ffc:	469e      	mov	lr, r3
 8000ffe:	4770      	bx	lr

08001000 <_fini>:
 8001000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001002:	bf00      	nop
 8001004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001006:	bc08      	pop	{r3}
 8001008:	469e      	mov	lr, r3
 800100a:	4770      	bx	lr
